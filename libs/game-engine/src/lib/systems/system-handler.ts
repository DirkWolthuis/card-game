import { System } from '../event-bus/store';
import { systems } from './systems';

/**
 * Handles an event by passing it to all systems that care about its type.
 * Returns an array of new events generated by the systems.
 */
export async function systemHandler(event: any, ecs: any): Promise<any[]> {
  const relevantSystems = systems.filter((system) => {
    // Optionally, systems can filter by event type internally
    return true;
  });

  let newEvents: any[] = [];
  for (const system of relevantSystems) {
    // Each system's handle may return an array of events
    const result = await system.handle(event, ecs);
    if (Array.isArray(result)) {
      newEvents = newEvents.concat(result);
    }
  }
  return newEvents;
}
